/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/fairwindsops/gemini/pkg/types/snapshotgroup/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnapshotGroupLister helps list SnapshotGroups.
// All objects returned here must be treated as read-only.
type SnapshotGroupLister interface {
	// List lists all SnapshotGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SnapshotGroup, err error)
	// SnapshotGroups returns an object that can list and get SnapshotGroups.
	SnapshotGroups(namespace string) SnapshotGroupNamespaceLister
	SnapshotGroupListerExpansion
}

// snapshotGroupLister implements the SnapshotGroupLister interface.
type snapshotGroupLister struct {
	indexer cache.Indexer
}

// NewSnapshotGroupLister returns a new SnapshotGroupLister.
func NewSnapshotGroupLister(indexer cache.Indexer) SnapshotGroupLister {
	return &snapshotGroupLister{indexer: indexer}
}

// List lists all SnapshotGroups in the indexer.
func (s *snapshotGroupLister) List(selector labels.Selector) (ret []*v1.SnapshotGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnapshotGroup))
	})
	return ret, err
}

// SnapshotGroups returns an object that can list and get SnapshotGroups.
func (s *snapshotGroupLister) SnapshotGroups(namespace string) SnapshotGroupNamespaceLister {
	return snapshotGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnapshotGroupNamespaceLister helps list and get SnapshotGroups.
// All objects returned here must be treated as read-only.
type SnapshotGroupNamespaceLister interface {
	// List lists all SnapshotGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SnapshotGroup, err error)
	// Get retrieves the SnapshotGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SnapshotGroup, error)
	SnapshotGroupNamespaceListerExpansion
}

// snapshotGroupNamespaceLister implements the SnapshotGroupNamespaceLister
// interface.
type snapshotGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnapshotGroups in the indexer for a given namespace.
func (s snapshotGroupNamespaceLister) List(selector labels.Selector) (ret []*v1.SnapshotGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SnapshotGroup))
	})
	return ret, err
}

// Get retrieves the SnapshotGroup from the indexer for a given namespace and name.
func (s snapshotGroupNamespaceLister) Get(name string) (*v1.SnapshotGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("snapshotgroup"), name)
	}
	return obj.(*v1.SnapshotGroup), nil
}
